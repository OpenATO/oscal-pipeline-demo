name: CI
on:
  push:
    branches:
      - main
      - develop
  pull_request: {}
jobs:

  # Representative of tests you would see in a real project
  application_test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install app dependencies
        run: pip install -r requirements.txt; npm ci
        working-directory: ./app
      - name: Start application container
        run: docker-compose up -d
        working-directory: ./app
      - name: Run Cypress tests
        run: npm run test
        working-directory: ./app
      - name: Run Python tests
        run: pytest
        working-directory: ./app
      - name: Shut down application container
        run: docker-compose down
        working-directory: ./app

  # Validate the current state of the OSCAL content before moving on to the assess stage
  oscal_validate:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Execute OSCAL Validation
        id: oscal-validation
        uses: ./.github/actions/oscal-validation
      - name: Warn if profile is newer then resolved catalog
        run: |
          if [[ .oscal/profile.yaml -nt .oscal/resolved-catalog.yaml ]]; then
            echo "::warning file=.oscal/resolved-catalog.yaml,line=1::resolved-catalog.yaml is older then profile.yaml and must be regenerated using 'oscal-cli profile resolve profile.yaml resolved-catalog.yaml'"
          fi

  # If tests and OSCAL validation passes, assess the current state of the application
  oscal_assess:
    runs-on: ubuntu-22.04
    needs:
      - oscal_validate
      - application_test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install app dependencies
        run: pip install -r requirements.txt; npm ci
        working-directory: ./app
      - name: Start application container
        run: docker-compose up -d
        working-directory: ./app
      # TODO: execute assess action
      # TODO: create comment/artifact
      - name: Shut down application container
        run: docker-compose down
        working-directory: ./app

